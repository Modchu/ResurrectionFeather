package modchu.resurrectionfeather;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.util.ArrayList;import java.util.List;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.resurrectionfeathercore.ResurrectionFeatherEntityCreature;import net.minecraft.client.Minecraft;import net.minecraft.creativetab.CreativeTabs;import net.minecraft.item.Item;import net.minecraft.item.ItemStack;import net.minecraft.src.mod_Modchu_ModchuLib;import cpw.mods.fml.common.Mod;import cpw.mods.fml.common.Mod.EventHandler;import cpw.mods.fml.common.event.FMLInitializationEvent;import cpw.mods.fml.common.event.FMLPreInitializationEvent;import cpw.mods.fml.common.registry.GameRegistry;import cpw.mods.fml.common.registry.LanguageRegistry;@Mod(modid="ResurrectionFeather", name="ResurrectionFeather", version="6")public class ResurrectionFeather {	public static int resurrectionFeatherID = 17650;	public static int onDeathTimeDrop = 20;	public static int onDeathTimeDespawn = 300;	public static int allResurrectionWaitTime = 300;	public static long allResurrectionTime = 3000;	public static boolean useOriginalIcon = true;	public static boolean DebugMessage = false;	private static final int minecraftVersion = 164;	public static Item itemResurrectionFeather;	public static ResurrectionFeather resurrectionFeatherInstance;	private static final File cfgdir = new File(Minecraft.getMinecraft().mcDataDir, "/config/");	private static File whiteListfile = new File(cfgdir, ("ResurrectionFeather_whiteList.cfg"));	private static File ngListfile = new File(cfgdir, ("ResurrectionFeather_NGList.cfg"));	public static List<String> whiteList = new ArrayList<String>();	public static List<String> ngList = new ArrayList<String>();	private static File mainCfgfile = new File(cfgdir, ("ResurrectionFeather.cfg"));	public static String itemName;	private String packageName;	public String getVersion() {		return "1.6.4-6";	}	@EventHandler	public void preInit(FMLPreInitializationEvent event) {		resurrectionFeatherInstance = this;		loadcfg();		itemName = "ResurrectionFeather";		itemResurrectionFeather = new ItemResurrectionFeather(				resurrectionFeatherID - 256).setUnlocalizedName(						itemName).setCreativeTab(CreativeTabs.tabMaterials);		LanguageRegistry.addName(itemResurrectionFeather, itemName);		GameRegistry.registerItem(itemResurrectionFeather, itemName);		itemResurrectionFeather.setTextureName("resurrectionfeather:" + itemName);		GameRegistry.addRecipe(new ItemStack(itemResurrectionFeather, 1),				new Object[] { " Y ", "YXY", " Y ", Character.valueOf('X'),						Item.feather, Character.valueOf('Y'), Item.ingotGold });		loadList();	}	public File getMinecraftDir() {		return Minecraft.getMinecraft().mcDataDir;	}	@EventHandler	public void init(FMLInitializationEvent event) {		ResurrectionFeatherEntityCreature.whiteList = whiteList;		ResurrectionFeatherEntityCreature.ngList = ngList;		ResurrectionFeatherEntityCreature.onDeathTimeDrop = onDeathTimeDrop;		ResurrectionFeatherEntityCreature.onDeathTimeDespawn = onDeathTimeDespawn;	}	public static void writerList(String[] s, File file, List<String> list) {		//Listファイル書き込み		try {			BufferedWriter bwriter = new BufferedWriter(new FileWriter(file));			for (int i = 0; i < s.length ; i++)			{				//Modchu_Debug.mDebug("s[i]="+s[i]);				if (s[i] != null) {					bwriter.write(s[i]);					list.add(s[i]);					bwriter.newLine();				}			}			bwriter.close();			Modchu_Debug.Debug("file new file create.");		} catch (Exception e) {			Modchu_Debug.Debug("file writer fail.");			e.printStackTrace();			Modchu_Debug.Debug(" ");		}	}	public static void loadList() {		// List読み込み		if (cfgdir.exists()) {			if (!whiteListfile.exists()) {				// whiteListファイルが無い = 新規作成				String s[] = {						"net.minecraft.entity.passive.EntityTameable", "Ocelot", "Wolf", "Horse", "LittleMaid"				};				writerList(s, whiteListfile, whiteList);			} else {				// whiteListファイルがある				try {					BufferedReader breader = new BufferedReader(new FileReader(							whiteListfile));					String rl;					int i = 0;					while ((rl = breader.readLine()) != null) {						whiteList.add(rl);						i++;					}					breader.close();					Modchu_Debug.mDebug("whiteList load end.");				} catch (Exception e) {					Modchu_Debug.Debug("whiteList file load fail.");		            e.printStackTrace();					Modchu_Debug.Debug(" ");				}			}			if (!ngListfile.exists()) {				// NGListファイルが無い = 新規作成				String s[] = {						"EntityMob"				};				writerList(s, ngListfile, ngList);			} else {				// NGListファイルがある				try {					BufferedReader breader = new BufferedReader(new FileReader(							ngListfile));					String rl;					int i = 0;					while ((rl = breader.readLine()) != null) {						ngList.add(rl);						i++;					}					breader.close();					Modchu_Debug.mDebug("NGList load end.");				} catch (Exception e) {					Modchu_Debug.Debug("NGList file load fail.");		            e.printStackTrace();					Modchu_Debug.Debug(" ");				}			}		}	}	public static void loadcfg() {		// cfg読み込み		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"resurrectionFeatherID=17650",						"onDeathTimeDrop=20",						"onDeathTimeDespawn=300",						"allResurrectionWaitTime=300",						"allResurrectionTime=3000",						"useOriginalIcon=true",						"DebugMessage=false"				};				Modchu_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				resurrectionFeatherID = Integer.valueOf((Modchu_Config.loadConfig(mainCfgfile, "resurrectionFeatherID", resurrectionFeatherID)).toString());				onDeathTimeDrop = Integer.valueOf((Modchu_Config.loadConfig(mainCfgfile, "onDeathTimeDrop", onDeathTimeDrop)).toString());				onDeathTimeDespawn = Integer.valueOf((Modchu_Config.loadConfig(mainCfgfile, "onDeathTimeDespawn", onDeathTimeDespawn)).toString());				allResurrectionWaitTime = Integer.valueOf((Modchu_Config.loadConfig(mainCfgfile, "allResurrectionWaitTime", allResurrectionWaitTime)).toString());				allResurrectionTime = Long.valueOf((Modchu_Config.loadConfig(mainCfgfile, "allResurrectionTime", allResurrectionTime)).toString());				useOriginalIcon = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useOriginalIcon", useOriginalIcon)).toString());				DebugMessage = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "DebugMessage", DebugMessage)).toString());				cfgMaxMinCheck();				String k[] = {						"resurrectionFeatherID",						"onDeathTimeDrop",						"onDeathTimeDespawn",						"allResurrectionWaitTime",						"allResurrectionTime",						"useOriginalIcon",						"DebugMessage"				};				String k1[] = {						""+resurrectionFeatherID,						""+onDeathTimeDrop,						""+onDeathTimeDespawn,						""+allResurrectionWaitTime,						""+allResurrectionTime,						""+useOriginalIcon,						""+DebugMessage				};				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}		}	}	public static void cfgMaxMinCheck() {		if (resurrectionFeatherID < 0) resurrectionFeatherID = 0;		if (resurrectionFeatherID > 32000) resurrectionFeatherID = 32000;		if (onDeathTimeDrop < 0) onDeathTimeDrop = 0;		if (onDeathTimeDrop > 2147483647) onDeathTimeDrop = 2147483647;		if (onDeathTimeDespawn < 0) onDeathTimeDespawn = 0;		if (onDeathTimeDespawn > 2147483647) onDeathTimeDespawn = 2147483647;	}	public String getClassName(String s) {		if (s == null) return null;		if (s.indexOf(".") > -1) return s;		String s1 = getPackage();		if (s1 != null) return s1.concat(".").concat(s);		return s;	}	public String getPackage() {		if (packageName != null				| mod_Modchu_ModchuLib.modchu_Main.isForge) return packageName;		Package pack = getClass().getPackage();		if (pack != null) packageName = pack.getName();		else packageName = null;		return packageName;	}	public static int getMinecraftVersion() {		return minecraftVersion;	}}