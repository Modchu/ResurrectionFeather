package modchu.resurrectionfeather;import java.util.HashMap;import java.util.Random;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_ItemMasterBasis;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.ridingindicatingrod.modc_RidingIndicatingRod;public class ItemResurrectionFeather extends Modchu_ItemMasterBasis {	private Random rand;	public ItemResurrectionFeather(HashMap<String, Object> map) {		super(map);		setMaxStackSize(16);		rand = new Random();	}	@Override	public int getColorFromItemStack(Object itemstack, int par1) {		return modc_ResurrectionFeather.useOriginalIcon ? 16777215 : 0x22ffff8c;	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase) {		return itemInteractionForEntity(itemStack, entityPlayer, entityLivingBase, null);	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase, Object enumHand) {		if (Modchu_AS.getFloat(Modchu_AS.entityLivingBaseGetHealth, entityLivingBase) > 0.0F) {			//Modchu_Debug.mDebug("itemInteractionForEntity return getHealth > 0.0F");			return false;		}		boolean isRemote = Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityPlayer);		Modchu_Debug.mDebug("itemInteractionForEntity 1 isRemote="+isRemote+" entityPlayer="+entityPlayer);		if (ResurrectionFeatherEntityCreature.resurrectionEntity(entityLivingBase)) {			//Modchu_Debug.mDebug("itemInteractionForEntity 2 isRemote="+isRemote+" itemStack="+itemStack);			if (!isRemote					&& !Modchu_AS.getBoolean(Modchu_AS.entityPlayerCapabilitiesIsCreativeMode)) {				if (itemStack != null) {					int stackSize = Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack);					Modchu_Debug.mDebug("itemInteractionForEntity 3 isRemote="+isRemote+" stackSize="+stackSize);					--stackSize;					Modchu_AS.set(Modchu_AS.itemStackStackSize, itemStack, stackSize);				} else {					//Modchu_Debug.mDebug("itemInteractionForEntity 4 itemStack == null !!");				}				//Modchu_Debug.mDebug("itemInteractionForEntity 5 isRemote="+isRemote);			}			//Modchu_Debug.mDebug("itemInteractionForEntity 10 end. isRemote="+isRemote);			return true;		} else {			//Modchu_Debug.mDebug("itemInteractionForEntity resurrectionEntity false isRemote="+isRemote);		}		//Modchu_Debug.mDebug("itemInteractionForEntity false end. isRemote="+isRemote);		return false;	}	@Override	public boolean onLeftClickEntity(Object itemStack, Object entityPlayer, Object entity) {		boolean isRemote = Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityPlayer);		if (isRemote) Modchu_AS.set(Modchu_AS.entityLivingBaseSwingItem, entityPlayer);		itemInteractionForEntity(itemStack, entityPlayer, entity);		return true;	}	@Override	public boolean hitEntity(Object itemStack, Object entityLivingBase, Object entityLivingBase2) {		Modchu_AS.set(Modchu_AS.entityLivingBaseHeal, entityLivingBase, 1.0F);		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2) ? itemInteractionForEntity(itemStack, entityLivingBase2, entityLivingBase) : itemInteractionForEntity(itemStack, null, entityLivingBase);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer) {		return onItemRightClick(itemStack, world, entityPlayer, null);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer, Object enumHand) {		boolean isRemote = Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityPlayer);		if (!isRemote) {			int stackSize = itemStack != null ? Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack) : 0;			if (itemStack != null					&& stackSize <= 0) 	Modchu_AS.set(Modchu_AS.entityPlayerDestroyCurrentEquippedItem, entityPlayer);		}		if (ResurrectionFeatherEntityCreature.allResurrection(entityPlayer, itemStack)) {			if (isRemote) Modchu_AS.set(Modchu_AS.entityLivingBaseSwingItem, entityPlayer, enumHand);		}		int version = Modchu_Main.getMinecraftVersion();		boolean flag = version > 189;		Object actionResult = flag ? Modchu_Reflect.newInstance("ActionResult", new Class[]{ Modchu_Reflect.loadClass("EnumActionResult"), Object.class }, new Object[]{ Modchu_AS.getEnum("EnumActionResult", "SUCCESS"), itemStack }) : itemStack;		return actionResult;	}	@Override	public void registerIcons(Object iIconRegister) {		int version = Modchu_Main.getMinecraftVersion();		Modchu_Main.registerIcons(base, iIconRegister,				modc_ResurrectionFeather.useOriginalIcon ?						version < 160						&& Modchu_Main.isForge ? "modchulib:"+Modchu_AS.getString(Modchu_AS.itemIconString, base) : Modchu_AS.getString(Modchu_AS.itemIconString, base) : "minecraft:feather");	}}