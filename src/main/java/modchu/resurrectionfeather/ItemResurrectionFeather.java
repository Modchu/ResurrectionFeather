package modchu.resurrectionfeather;import java.util.Random;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_ItemBasis;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_Item;public class ItemResurrectionFeather extends Modchu_ItemBasis {	private Random rand;	public ItemResurrectionFeather(Modchu_Item modchu_Item, Object... o) {		super(modchu_Item, (Object[]) o);		setMaxStackSize(1);		//setMaxDamage(1);		rand = new Random();	}	@Override	public int getColorFromItemStack(Object itemstack, int par1) {		return modc_ResurrectionFeather.useOriginalIcon ? 16777215 : 0x22ffff8c;	}	@Override	public boolean itemInteractionForEntity(Object itemStack, Object entityPlayer, Object entityLivingBase) {		boolean isRemote = Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entityLivingBase);		//Modchu_Debug.mDebug("itemInteractionForEntity isRemote="+isRemote);		int stackSize = itemStack != null ? Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack) : 1;		//if (itemStack != null				//&& stackSize <= 0) Modchu_AS.set(Modchu_AS.entityPlayerDestroyCurrentEquippedItem, entityPlayer);		if (Modchu_AS.getFloat(Modchu_AS.entityLivingBaseGetHealth, entityLivingBase) > 0.0F) {			//Modchu_Debug.mDebug("itemInteractionForEntity return getHealth > 0.0F isRemote="+isRemote);			return false;		}		//Modchu_Debug.mDebug("itemInteractionForEntity 1 isRemote="+isRemote);		if (ResurrectionFeatherEntityCreature.resurrectionEntity(entityLivingBase)) {			//Modchu_Debug.mDebug("itemInteractionForEntity 2 isRemote="+isRemote+" itemStack="+itemStack+" stackSize="+stackSize);			--stackSize;			if (stackSize < 0) stackSize = 0;			if (itemStack != null) {				Modchu_AS.set(Modchu_AS.itemStackStackSize, itemStack, stackSize);				//Modchu_Debug.mDebug("itemInteractionForEntity 3 itemStack != null set itemStackStackSize isRemote="+isRemote+" stackSize="+Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack));			} else {				if (!isRemote) {					//Modchu_AS.set(Modchu_AS.itemStackDamageItem, itemStack, 1, entityLivingBase);					//Modchu_Debug.mDebug("itemInteractionForEntity 4 isRemote="+isRemote+" itemStack="+itemStack+" stackSize="+stackSize);					if (stackSize <= 0							&& entityPlayer != null) {						//Modchu_Debug.mDebug("itemInteractionForEntity 5 isRemote="+isRemote+" itemStack="+itemStack);						int i = Modchu_Main.getEntityPlayerMainInventoryItemClassToCurrentItem(getClass(), entityPlayer);						if (i > -1) {							itemStack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityPlayer, i);							if (itemStack != null) {								Modchu_AS.set(Modchu_AS.itemStackStackSize, itemStack, stackSize);								//Modchu_AS.set(Modchu_AS.entityPlayerInventorySetInventorySlotContents, entityPlayer, i, itemStack);							}						}						//Modchu_Debug.mDebug("itemInteractionForEntity 6 isRemote="+isRemote+" i="+i);					} else {						//Modchu_Debug.mDebug("itemInteractionForEntity 7 else isRemote="+isRemote+" itemStack="+itemStack+" stackSize="+stackSize+" entityPlayer="+entityPlayer);					}				} else {/*					int currentItem = Modchu_AS.getInt(Modchu_AS.entityPlayerInventoryCurrentItem, entityPlayer);					itemStack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityPlayer, currentItem);					if (itemStack != null) {*/					int i = Modchu_Main.getEntityPlayerMainInventoryItemClassToCurrentItem(getClass(), entityPlayer);					if (i > -1) {						itemStack = Modchu_AS.get(Modchu_AS.entityPlayerInventoryGetStackInSlot, entityPlayer, i);						if (itemStack != null) {							Modchu_AS.set(Modchu_AS.itemStackStackSize, itemStack, stackSize);							Modchu_AS.set(Modchu_AS.entityPlayerInventorySetInventorySlotContents, entityPlayer, i, null);							//Modchu_Debug.mDebug("itemInteractionForEntity 8 itemStack != null set itemStackStackSize isRemote="+isRemote+" i="+i+" stackSize="+Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack));						} else {							//Modchu_Debug.mDebug("itemInteractionForEntity 9 itemStack == null !! isRemote="+isRemote);						}					}				}			}			//Modchu_Debug.mDebug("itemInteractionForEntity 10 end. isRemote="+isRemote);			return true;		} else {			//Modchu_Debug.mDebug("itemInteractionForEntity resurrectionEntity false isRemote="+isRemote);		}		//Modchu_Debug.mDebug("itemInteractionForEntity false end. isRemote="+isRemote);		return false;	}	@Override	public boolean hitEntity(Object itemStack, Object entityLivingBase, Object entityLivingBase2) {		int stackSize = itemStack != null ? Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack) : 0;		if (itemStack != null				&& stackSize <= 0				&& Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2)) 	Modchu_AS.set(Modchu_AS.entityPlayerDestroyCurrentEquippedItem, entityLivingBase2);		Modchu_AS.set(Modchu_AS.entityLivingBaseHeal, entityLivingBase, 1.0F);		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entityLivingBase2) ? itemInteractionForEntity(itemStack, entityLivingBase2, entityLivingBase) : itemInteractionForEntity(itemStack, null, entityLivingBase);	}	@Override	public Object onItemRightClick(Object itemStack, Object world, Object entityPlayer) {		int stackSize = itemStack != null ? Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemStack) : 0;		if (itemStack != null				&& stackSize <= 0) 	Modchu_AS.set(Modchu_AS.entityPlayerDestroyCurrentEquippedItem, entityPlayer);		if (ResurrectionFeatherEntityCreature.allResurrection(entityPlayer, itemStack)) Modchu_AS.set(Modchu_AS.entityLivingBaseSwingItem, entityPlayer);		return itemStack;	}	@Override	public void registerIcons(Object iIconRegister) {		Modchu_AS.set(Modchu_AS.itemItemIcon, base, Modchu_AS.get(Modchu_AS.iIconRegisterRegisterIcon, iIconRegister, modc_ResurrectionFeather.useOriginalIcon ? Modchu_AS.getString(Modchu_AS.itemIconString, base) : "feather"));	}}